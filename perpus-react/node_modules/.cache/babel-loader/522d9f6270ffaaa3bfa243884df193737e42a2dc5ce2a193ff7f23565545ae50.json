{"ast":null,"code":"var _jsxFileName = \"E:\\\\projek-magang\\\\free-pass\\\\Freepass-FE-2023\\\\perpus-react\\\\src\\\\components\\\\Data.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState, createContext, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\nconst Data = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [books, setBooks] = useState([]);\n  const [search, setSearch] = useState(\"the+lord+of+the+rings\");\n  const [result, setResult] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const baseURL = \"http://openlibrary.org/search.json?title=\";\n\n  // const bookDatas = useCallback(async() => {\n  //     setLoading(true);\n  //     try{\n  //         const response = await fetch(`${baseURL}${search}`)\n  //         const datas = await response.json()\n  //         const {list} = datas\n  //         console.log(datas)\n  //         console.log(list)\n\n  //         if(list){\n  //             const newBooks = list.slice(0, 20)\n  //             .map((book) => {\n  //                 const {key, author_name, cover_i, edition_count, first_publish_year, title} = book;\n\n  //                 return {\n  //                     id: key,\n  //                     author: author_name,\n  //                     cover_id: cover_i,\n  //                     edition_count: edition_count,\n  //                     year: first_publish_year,\n  //                     title: title\n  //                 }\n  //             })\n\n  //             setBooks(newBooks);\n\n  //             if(newBooks.length > 1){\n  //                 setResult(\"Your Search Result\")\n  //             }else {\n  //                 setResult(\"No Search Result Found!\")\n  //             }\n  //         } else {\n  //             setBooks([])\n  //             setResult(\"No Search Result Found!\")\n  //         }\n  //         setLoading(false)\n  //     } catch(error) {\n  //         console.log(error)\n  //         setLoading(false)\n  //     }\n  // }, [search])\n\n  // const getBook = async () => {\n  //     setLoading(true)\n  //     axios.get(`${baseURL}${search}`)\n  //         .then(response => {\n  //             console.log(response)\n  //             const {list} =  JSON.stringify(response.docs)\n  //             console.log(list)\n\n  //             if(list){\n  //                 const newBooks = list.slice(0, 20)\n  //                 .map((book) => {\n  //                     const {key, author_name, cover_i, edition_count, first_publish_year, title} = book;\n\n  //                     return {\n  //                         id: key,\n  //                         author: author_name,\n  //                         cover_id: cover_i,\n  //                         edition_count: edition_count,\n  //                         year: first_publish_year,\n  //                         title: title\n  //                     }\n  //                 })\n\n  //                 setBooks(newBooks);\n\n  //                 if(newBooks.length > 1){\n  //                     setResult(\"Your Search Result\")\n  //                 }else {\n  //                     setResult(\"No Search Result Found!\")\n  //                 }\n  //             } else {\n  //                 setBooks([])\n  //                 setResult(\"No Search Result Found!\")\n  //             }\n  //             setLoading(false)\n  //         })\n  //         .catch(error => {\n  //             console.log(error);\n  //             setLoading(false);\n  //         });\n  // }\n\n  useEffect(() => {\n    bookDatas();\n  }, [search, bookDatas]);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      books,\n      setSearch,\n      loading,\n      result,\n      setResult\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(Data, \"xZ89295QL9p8u9nFLLrsqZIyPyQ=\");\n_c = Data;\nexport default Data;\nvar _c;\n$RefreshReg$(_c, \"Data\");","map":{"version":3,"names":["axios","useEffect","useState","createContext","useCallback","DataContext","Data","children","books","setBooks","search","setSearch","result","setResult","loading","setLoading","baseURL","bookDatas"],"sources":["E:/projek-magang/free-pass/Freepass-FE-2023/perpus-react/src/components/Data.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState, createContext, useCallback } from \"react\";    \r\n\r\nexport const DataContext = createContext();\r\nconst Data = ({children}) => {\r\n    const [books, setBooks] = useState([])\r\n    const [search, setSearch] = useState(\"the+lord+of+the+rings\")\r\n    const [result, setResult] = useState(\"\")\r\n    const [loading, setLoading] = useState(true)\r\n    const baseURL = \"http://openlibrary.org/search.json?title=\"\r\n\r\n    // const bookDatas = useCallback(async() => {\r\n    //     setLoading(true);\r\n    //     try{\r\n    //         const response = await fetch(`${baseURL}${search}`)\r\n    //         const datas = await response.json()\r\n    //         const {list} = datas\r\n    //         console.log(datas)\r\n    //         console.log(list)\r\n\r\n    //         if(list){\r\n    //             const newBooks = list.slice(0, 20)\r\n    //             .map((book) => {\r\n    //                 const {key, author_name, cover_i, edition_count, first_publish_year, title} = book;\r\n    \r\n    //                 return {\r\n    //                     id: key,\r\n    //                     author: author_name,\r\n    //                     cover_id: cover_i,\r\n    //                     edition_count: edition_count,\r\n    //                     year: first_publish_year,\r\n    //                     title: title\r\n    //                 }\r\n    //             })\r\n                \r\n    //             setBooks(newBooks);\r\n\r\n    //             if(newBooks.length > 1){\r\n    //                 setResult(\"Your Search Result\")\r\n    //             }else {\r\n    //                 setResult(\"No Search Result Found!\")\r\n    //             }\r\n    //         } else {\r\n    //             setBooks([])\r\n    //             setResult(\"No Search Result Found!\")\r\n    //         }\r\n    //         setLoading(false)\r\n    //     } catch(error) {\r\n    //         console.log(error)\r\n    //         setLoading(false)\r\n    //     }\r\n    // }, [search])\r\n\r\n    // const getBook = async () => {\r\n    //     setLoading(true)\r\n    //     axios.get(`${baseURL}${search}`)\r\n    //         .then(response => {\r\n    //             console.log(response)\r\n    //             const {list} =  JSON.stringify(response.docs)\r\n    //             console.log(list)\r\n\r\n    //             if(list){\r\n    //                 const newBooks = list.slice(0, 20)\r\n    //                 .map((book) => {\r\n    //                     const {key, author_name, cover_i, edition_count, first_publish_year, title} = book;\r\n        \r\n    //                     return {\r\n    //                         id: key,\r\n    //                         author: author_name,\r\n    //                         cover_id: cover_i,\r\n    //                         edition_count: edition_count,\r\n    //                         year: first_publish_year,\r\n    //                         title: title\r\n    //                     }\r\n    //                 })\r\n                    \r\n    //                 setBooks(newBooks);\r\n\r\n    //                 if(newBooks.length > 1){\r\n    //                     setResult(\"Your Search Result\")\r\n    //                 }else {\r\n    //                     setResult(\"No Search Result Found!\")\r\n    //                 }\r\n    //             } else {\r\n    //                 setBooks([])\r\n    //                 setResult(\"No Search Result Found!\")\r\n    //             }\r\n    //             setLoading(false)\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error);\r\n    //             setLoading(false);\r\n    //         });\r\n    // }\r\n\r\n    useEffect(() => {\r\n        bookDatas()\r\n    }, [search, bookDatas])\r\n\r\n    return(\r\n        <DataContext.Provider value={{books, setSearch, loading, result, setResult}}>\r\n            {children}\r\n        </DataContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Data;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,WAAW,QAAQ,OAAO;AAAC;AAExE,OAAO,MAAMC,WAAW,gBAAGF,aAAa,EAAE;AAC1C,MAAMG,IAAI,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,uBAAuB,CAAC;EAC7D,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMc,OAAO,GAAG,2CAA2C;;EAE3D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAf,SAAS,CAAC,MAAM;IACZgB,SAAS,EAAE;EACf,CAAC,EAAE,CAACP,MAAM,EAAEO,SAAS,CAAC,CAAC;EAEvB,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACT,KAAK;MAAEG,SAAS;MAAEG,OAAO;MAAEF,MAAM;MAAEC;IAAS,CAAE;IAAA,UACvEN;EAAQ;IAAA;IAAA;IAAA;EAAA,QACU;AAE/B,CAAC;AAAA,GApGKD,IAAI;AAAA,KAAJA,IAAI;AAsGV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}